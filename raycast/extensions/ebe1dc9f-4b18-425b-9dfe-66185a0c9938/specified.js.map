{
  "version": 3,
  "sources": ["../src/specified.ts", "../src/index.tsx", "../src/utils/checkInstall.ts"],
  "sourcesContent": ["import { buildCommand } from \".\";\n\nexport default buildCommand(\"specified\");\n", "import {\n  open,\n  captureException,\n  showToast,\n  Toast,\n  Action,\n  getFrontmostApplication,\n  closeMainWindow,\n  Grid,\n  ActionPanel,\n  Icon,\n} from \"@raycast/api\";\nimport { DetectedInstallation, ensureRectangleIsInstalled } from \"./utils/checkInstall\";\nimport { CommandGroups } from \"./actions/interface\";\nimport { RectangleAction, commandGroups as rectangleCommandGroups } from \"./actions/rectangle\";\nimport { RectangleProAction, commandGroups as rectangleProCommandGroups } from \"./actions/rectangle-pro\";\nimport { useEffect, useState } from \"react\";\n\ntype AllCommandGroups = CommandGroups<RectangleAction | RectangleProAction>;\n\nexport default function Command() {\n  const [detectedInstallation, setDetectedInstallation] = useState<DetectedInstallation>();\n\n  useEffect(() => {\n    ensureRectangleIsInstalled().then((detectionResult) => {\n      setDetectedInstallation(detectionResult);\n    });\n  }, []);\n\n  const isLoading = detectedInstallation === undefined;\n\n  const commandGroups: AllCommandGroups =\n    detectedInstallation === \"rectangle-pro\" ? rectangleProCommandGroups : rectangleCommandGroups;\n\n  const searchBarPlaceholderText =\n    detectedInstallation === \"rectangle-pro\" ? \"Find a Rectangle Pro action\" : \"Find a Rectangle action\";\n\n  return (\n    <Grid inset={Grid.Inset.Medium} searchBarPlaceholder={searchBarPlaceholderText} isLoading={isLoading}>\n      {Object.values(commandGroups).map((group) => (\n        <Grid.Section title={group.title} key={group.title}>\n          {group.items.map(({ name, title, icon, description }) => (\n            <Grid.Item\n              key={name}\n              content={{\n                value: {\n                  source: {\n                    light: icon,\n                    dark: icon.replace(\".png\", \"@dark.png\"),\n                  },\n                },\n                tooltip: description,\n              }}\n              title={title}\n              subtitle={description}\n              actions={\n                <ActionPanel>\n                  <Action title={`Execute ${title}`} onAction={() => buildCommand(name)()} icon={Icon.Play} />\n                  <Action.CreateQuicklink\n                    title={`Create Quicklink for ${title}`}\n                    icon={Icon.Link}\n                    quicklink={{ link: `${detectedInstallation}://execute-action?name=${name}`, name: title }}\n                  />\n                </ActionPanel>\n              }\n            />\n          ))}\n        </Grid.Section>\n      ))}\n    </Grid>\n  );\n}\n\nexport const buildCommand = (action: RectangleAction | RectangleProAction) => async () => {\n  const installedVersion = await ensureRectangleIsInstalled();\n\n  // bail out early if Rectangle is not found\n  if (installedVersion === \"none\") {\n    return;\n  }\n\n  const url = `${installedVersion}://execute-action?name=${action}`;\n\n  try {\n    await getFrontmostApplication();\n  } catch (e: unknown) {\n    captureException(e);\n    await showToast({\n      style: Toast.Style.Failure,\n      title: `Failed to run action \"${action}: unable to obtain focused window\"`,\n    });\n    return;\n  }\n\n  await closeMainWindow();\n\n  try {\n    await open(url);\n  } catch (e: unknown) {\n    captureException(e);\n    await showToast({\n      style: Toast.Style.Failure,\n      title: `Failed to run action \"${action}\"`,\n    });\n  }\n};\n", "import { getApplications, showToast, Toast, open } from \"@raycast/api\";\n\nexport type DetectedInstallation = \"rectangle\" | \"rectangle-pro\" | \"none\";\n\nasync function detectInstallation(): Promise<DetectedInstallation> {\n  const applications = await getApplications();\n  if (applications.some(({ bundleId }) => bundleId === \"com.knollsoft.Hookshot\")) {\n    return \"rectangle-pro\";\n  } else if (applications.some(({ bundleId }) => bundleId === \"com.knollsoft.Rectangle\")) {\n    return \"rectangle\";\n  }\n  return \"none\";\n}\n\n/**\n * Ensures that Rectangle is installed.\n *\n * If Rectangle is not installed, displays a toast notification prompting the user to download it from rectangleapp.com.\n *\n * @returns {DetectedInstallation} Which version of Rectangle (if any) is installed.\n */\nexport async function ensureRectangleIsInstalled(): Promise<DetectedInstallation> {\n  const detectedInstallation = await detectInstallation();\n  if (detectedInstallation === \"none\") {\n    const options: Toast.Options = {\n      style: Toast.Style.Failure,\n      title: \"Rectangle is not installed.\",\n      message: \"You can download it from rectangleapp.com \uD83D\uDE09\",\n      primaryAction: {\n        title: \"Open https://rectangleapp.com in default browser\",\n        onAction: (toast) => {\n          open(\"https://rectangleapp.com\");\n          toast.hide();\n        },\n      },\n    };\n\n    await showToast(options);\n  }\n  return detectedInstallation;\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAWO,wBCXP,IAAAC,EAAwD,wBAIxD,eAAeC,GAAoD,CACjE,IAAMC,EAAe,QAAM,mBAAgB,EAC3C,OAAIA,EAAa,KAAK,CAAC,CAAE,SAAAC,CAAS,IAAMA,IAAa,wBAAwB,EACpE,gBACED,EAAa,KAAK,CAAC,CAAE,SAAAC,CAAS,IAAMA,IAAa,yBAAyB,EAC5E,YAEF,MACT,CASA,eAAsBC,GAA4D,CAChF,IAAMC,EAAuB,MAAMJ,EAAmB,EACtD,GAAII,IAAyB,OAAQ,CACnC,IAAMC,EAAyB,CAC7B,MAAO,QAAM,MAAM,QACnB,MAAO,8BACP,QAAS,sDACT,cAAe,CACb,MAAO,mDACP,SAAWC,GAAU,IACnB,QAAK,0BAA0B,EAC/BA,EAAM,KAAK,CACb,CACF,CACF,EAEA,QAAM,aAAUD,CAAO,CACzB,CACA,OAAOD,CACT,CDxBA,IAAAG,EAAoC,iBAwCpBC,EAAA,6BAiBT,IAAMC,EAAgBC,GAAiD,SAAY,CACxF,IAAMC,EAAmB,MAAMC,EAA2B,EAG1D,GAAID,IAAqB,OACvB,OAGF,IAAME,EAAM,GAAGF,CAAgB,0BAA0BD,CAAM,GAE/D,GAAI,CACF,QAAM,2BAAwB,CAChC,OAASI,EAAY,IACnB,oBAAiBA,CAAC,EAClB,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,yBAAyBJ,CAAM,oCACxC,CAAC,EACD,MACF,CAEA,QAAM,mBAAgB,EAEtB,GAAI,CACF,QAAM,QAAKG,CAAG,CAChB,OAASC,EAAY,IACnB,oBAAiBA,CAAC,EAClB,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,yBAAyBJ,CAAM,GACxC,CAAC,CACH,CACF,EDvGA,IAAOK,EAAQC,EAAa,WAAW",
  "names": ["specified_exports", "__export", "specified_default", "__toCommonJS", "import_api", "import_api", "detectInstallation", "applications", "bundleId", "ensureRectangleIsInstalled", "detectedInstallation", "options", "toast", "import_react", "import_jsx_runtime", "buildCommand", "action", "installedVersion", "ensureRectangleIsInstalled", "url", "e", "specified_default", "buildCommand"]
}
